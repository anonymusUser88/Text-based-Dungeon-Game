/*
 * This is a monster room, where the player can fight monsters
 * A subclass of room
 * April 20, 2024
 * */

package mainPackage;

import java.util.Scanner;

public class MonsterRoom extends Room 
{
	private int monsterHealth; // health of monster
	private boolean fightHasEnded = false; // checks whether fight has ended
	private int randomNumber; // random number generated by user
	private int playerNumber; // user's number
	private int extraWeaponValues = 0; // the scoring system is stacked, so the user may have extra weapons that deal extra damage
	int extraDefenceValues = 0; // similarly, defense is stacked
	private Scanner scan = new Scanner(System.in); // scanner
	
	public MonsterRoom(int room, int northExit, int eastExit, int southExit, int westExit, String text, int monsterHealth) 
	{
		super(room, northExit, eastExit, southExit, westExit, text);
		this.monsterHealth = monsterHealth;
	}
	
	public void drawRoom() 
	{
		super.drawRoom(); // the room is drawn
		System.out.println("You encountered a monster!");
		
		while(!this.fightHasEnded) // while the fight is ongoing
		{
			this.printGeneralInformation(); // hp + prompt is printed
			this.playerNumber = scan.nextInt(); // user inputs a random number
			this.checkPlayerAnswer(); // checks whether player's answer is within range
			this.checkIfFightHasEnded(); // checks whether the fight is done
		}
	}
	
	public void printGeneralInformation() // prints info at beginning of fight
	{
		// printing health
		System.out.println("\nMonster HP: " + this.monsterHealth);
		System.out.println("Your HP:" + Driver.player.getPlayerHealth());
		this.randomNumber = (int) (Math.random()*101); // generates a number between 0 and 100
		System.out.println("\nGuess a random number between 0 - 100 inclusive");
		extraWeaponValues = (1-Driver.player.getHasGems())*1 + (1-Driver.player.getHasSword())*3+(1-Driver.player.getHasPotion())*2+(1-Driver.player.getHasSpear())*1; // the fighting is stacked. If the user extra weapons, it'll include its damage
		extraDefenceValues = Driver.player.getHasShield()+(1-Driver.player.getHasBarrier())*2; // similarly, protection is stacked
	}
	
	public void checkPlayerAnswer()
	{
		if (Math.abs(this.randomNumber - this.playerNumber) <= 40) // if the number is within a certain range
		{
			System.out.println("You got close enough. You attack!");
			this.monsterHealth-=3+this.extraWeaponValues; // the player attacks
		}
		else
		{
			System.out.println("You were not close. The monster attacks!");
			Driver.player.setPlayerHealth(Driver.player.getPlayerHealth()-4+this.extraDefenceValues); // otherwise the monster attacks
		}
	}
	
	public void checkIfFightHasEnded()
	{
		if (monsterHealth <= 0) // if the monster has died
		{
			this.fightHasEnded = true; // the fight ends
			System.out.println("\nYou have defeated the monster!");
			System.out.println("You have earned 200 coins!");
			Driver.player.setPlayerMoney(200); // the player earns coins
			this.drawnText = "      ";
			Driver.roomObjects[this.roomID] = new Room(this.roomID, this.northExit, this.eastExit, this.southExit, this.westExit, this.drawnText); // instantiates a new room
		}
		else if (Driver.player.getPlayerHealth() <= 0)
		{
			System.out.println("Oh no! You died :(\n");
			this.fightHasEnded = true; // the fight ends
			Driver.gameState = 3; // the game ends
		}
	}
}
